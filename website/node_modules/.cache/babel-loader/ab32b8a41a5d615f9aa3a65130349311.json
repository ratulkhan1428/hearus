{"ast":null,"code":"var _jsxFileName = \"C:\\\\Web Development\\\\Projects\\\\hearus\\\\website\\\\src\\\\components\\\\Login\\\\PrivateRoute.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useContext } from 'react';\nimport { UserContext } from '../../App';\nimport jwt_decode from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = ({\n  children,\n  ...rest\n}) => {\n  _s();\n\n  const [loggedInUser, setLoggedInUser] = useContext(UserContext);\n\n  const isLoggedIn = () => {\n    const token = sessionStorage.getItem('token');\n\n    if (!token) {\n      return false;\n    }\n\n    const decodedToken = jwt_decode(token); // get current time\n\n    const currentTime = new Date().getTime() / 1000; // compare the expiration time with the current time\n    // will return false if expired and will return true if not expired\n\n    return decodedToken.exp > currentTime;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: ({\n      location\n    }) => loggedInUser.email || isLoggedIn() ? children : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: \"/login\",\n        state: {\n          from: location\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PrivateRoute, \"xnZl/o+OAJkkhQWyVMfTn8VXTc8=\");\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["C:/Web Development/Projects/hearus/website/src/components/Login/PrivateRoute.js"],"names":["React","Route","Redirect","useContext","UserContext","jwt_decode","PrivateRoute","children","rest","loggedInUser","setLoggedInUser","isLoggedIn","token","sessionStorage","getItem","decodedToken","currentTime","Date","getTime","exp","location","email","pathname","state","from"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,UAAP,MAAuB,YAAvB;;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAW,KAAGC;AAAd,CAAD,KAAyB;AAAA;;AAC1C,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,UAAU,CAACC,WAAD,CAAlD;;AAEA,QAAMO,UAAU,GAAG,MAAM;AACvB,UAAMC,KAAK,GAAGC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAd;;AACA,QAAG,CAACF,KAAJ,EAAU;AACR,aAAO,KAAP;AACD;;AACD,UAAMG,YAAY,GAAGV,UAAU,CAACO,KAAD,CAA/B,CALuB,CAMvB;;AACA,UAAMI,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAA3C,CAPuB,CAQvB;AACA;;AACA,WAAOH,YAAY,CAACI,GAAb,GAAmBH,WAA1B;AACD,GAXD;;AAYA,sBACI,QAAC,KAAD,OACER,IADF;AAEF,IAAA,MAAM,EAAE,CAAC;AAAEY,MAAAA;AAAF,KAAD,KACLX,YAAY,CAACY,KAAb,IAAsBV,UAAU,EAAjC,GACEJ,QADF,gBAGE,QAAC,QAAD;AACE,MAAA,EAAE,EAAE;AACFe,QAAAA,QAAQ,EAAE,QADR;AAEFC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAEJ;AAAR;AAFL;AADN;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CAhCD;;GAAMd,Y;;KAAAA,Y;AAkCN,eAAeA,YAAf","sourcesContent":["import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { useContext } from 'react';\r\nimport { UserContext } from '../../App';\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nconst PrivateRoute = ({children, ...rest}) => {\r\n    const [loggedInUser, setLoggedInUser] = useContext(UserContext);\r\n    \r\n    const isLoggedIn = () => {\r\n      const token = sessionStorage.getItem('token');\r\n      if(!token){\r\n        return false;\r\n      }\r\n      const decodedToken = jwt_decode(token);\r\n      // get current time\r\n      const currentTime = new Date().getTime() / 1000;\r\n      // compare the expiration time with the current time\r\n      // will return false if expired and will return true if not expired\r\n      return decodedToken.exp > currentTime;\r\n    }\r\n    return (\r\n        <Route\r\n      {...rest}\r\n      render={({ location }) =>\r\n        (loggedInUser.email || isLoggedIn()) ? (\r\n          children\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/login\",\r\n              state: { from: location }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;"]},"metadata":{},"sourceType":"module"}